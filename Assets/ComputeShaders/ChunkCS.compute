#pragma kernel CSMain
#include "OpenSource/MarchingCubesTables.hlsl"
#include "OpenSource/Quaternion.hlsl"
#include "Common.hlsl"


struct Triangle
{
    float3 a, b, c;
    float2 auv;
    float2 buv;
    float2 cuv;
};
AppendStructuredBuffer<Triangle> _Triangles;

float _IsoLevel;

RWStructuredBuffer<float> _Values;

//oblicz punkt pomiedzy dwoma wierzcholkami
float3 interpolate(float3 edgeVertex1, float valueAtVertex1, float3 edgeVertex2, float valueAtVertex2)
{
    return (edgeVertex1 + (_IsoLevel - valueAtVertex1) * (edgeVertex2 - edgeVertex1) / (valueAtVertex2 - valueAtVertex1));
}


[numthreads(numberOfThreads, numberOfThreads, numberOfThreads)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    _Values[indexFromCoordinates(id.x, id.y, id.z)] = clamp(_Values[indexFromCoordinates(id.x, id.y, id.z)], 0, 1);
    
    //if(id.x == 0 || id.y == 0 || id.z == 0 || id.x == _Size || id.y == _Size || id.z == _Size)
    if (id.x < _Size - 1 && id.y < _Size - 1 && id.z < _Size - 1)
    {
        float cubeValues[8];
        for (int i = 0; i < 8; i++)
        {
            cubeValues[i] = _Values[indexFromCoordinates(id.x + cornerOffsets[i].x, id.y + cornerOffsets[i].y, id.z + cornerOffsets[i].z)];
        }
        
        int cubeIndex = 0;
        for (int i = 0; i < 8; i++)
        {
            if (cubeValues[i] < _IsoLevel)
                cubeIndex |= (int) pow(2, i);
        }
        
        int edges[] = triangleTable[cubeIndex];
        
        for (int i = 0; edges[i] != -1; i += 3)
        {
            // odczytanie wszystkich krawedzi
            int e00 = edgeConnections[edges[i]][0];
            int e01 = edgeConnections[edges[i]][1];
            int e10 = edgeConnections[edges[i + 1]][0];
            int e11 = edgeConnections[edges[i + 1]][1];
            int e20 = edgeConnections[edges[i + 2]][0];
            int e21 = edgeConnections[edges[i + 2]][1];
            
            // obliczenie wierzcholkow trojkata w zaleznosci od wielkosci roznicy wartosci
            Triangle triang;
            triang.a = interpolate(cornerOffsets[e00], cubeValues[e00], cornerOffsets[e01], cubeValues[e01]) + id;
            triang.b = interpolate(cornerOffsets[e10], cubeValues[e10], cornerOffsets[e11], cubeValues[e11]) + id;
            triang.c = interpolate(cornerOffsets[e20], cubeValues[e20], cornerOffsets[e21], cubeValues[e21]) + id;
            
            // obliczenie mapy UV
            // trojkat jest obracany w taki sposob aby wektor normalny(prostopadly) tego trojkata wskazany byl na os z+
            // dzieki temu eliminujemy os z, i mozemy wykorzystac x oraz y do mapowania na teksturze
            float3 normal = cross(triang.c - triang.a, triang.b - triang.a);
            float4 rotation = q_inverse(q_look_at(normal, float3(0, 1, 0)));

            triang.auv = rotate_vector(triang.a, rotation).xy;
            triang.buv = rotate_vector(triang.b, rotation).xy;
            triang.cuv = rotate_vector(triang.c, rotation).xy;
            
            
            _Triangles.Append(triang);
        }

    }
}


